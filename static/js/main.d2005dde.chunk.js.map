{"version":3,"sources":["components/Button/Button.tsx","store/actions/popup.ts","utils/utils.tsx","api/api.ts","store/actions/todo.ts","components/Header/Header.module.css","components/Loader/Loader.module.css","components/Popup/Popup.module.css","components/Button/Button.module.css","components/Authorization/Authorization.module.css","img/redux.svg","store/actions/actions.ts","store/actions/user.ts","components/Header/Header.tsx","components/Loader/Loader.tsx","components/ToDoList/ToDoListContainer.tsx","components/Popup/Popup.tsx","components/App/App.tsx","serviceWorker.js","store/reducers/todoReducer.ts","store/reducers/userReducer.ts","store/reducers/popupReducer.ts","store/store.ts","components/Authorization/Authorization.tsx","index.tsx"],"names":["Button","theme","callback","disabled","content","children","className","style","btn","onClick","popupActions","showPopup","message","popupAct","type","confirmPopup","confirm","onConfirmPopup","popupAction","dispatch","actions","deleteToDO","payload","makeToDo","state","title","userId","id","todos","length","completed","findToDo","map","todo","getUserId","user","api","loadData","axios","get","then","response","data","todoActions","loadTodosStatus","loadToDoListSuccess","completeToDo","uncompleteToDo","addToDo","fetchToDoList","module","exports","userLogin","Header","header","header__img","src","logo","alt","Loader","container","lds_ripple","ToDoList","React","lazy","connect","isLoading","load","deleteToDo","toDoId","props","useEffect","fallback","popup","isShown","onConfirm","onCancel","containerVisibility","show","hide","to","Boolean","window","location","hostname","match","initialState","todoReducer","action","newList","filter","el","newToDo","userReducer","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","withRouter","history","useState","value","setValue","select","onChange","e","currentTarget","push","ReactDOM","render","StrictMode","path","component","Authorization","exact","App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.d2005dde.chunk.js","sourcesContent":["import React from \"react\";\r\nimport style from \"./Button.module.css\";\r\n\r\ntype indexStyle = keyof typeof style;\r\n\r\ninterface ButtonProps {\r\n    theme: indexStyle\r\n    callback: ()=>void\r\n    disabled?: boolean\r\n}\r\n\r\nconst Button: React.FC<ButtonProps> = ({ theme,callback,disabled, ...props }) => {\r\n    const content = props.children;\r\n\r\n    return (\r\n        <button className={`${style.btn} ${style[theme]}`}\r\n                onClick={callback}\r\n                disabled={disabled}\r\n        >\r\n            {content}\r\n        </button>\r\n    )\r\n};\r\n\r\nexport default Button;","import {ThunkAction} from \"redux-thunk\";\r\nimport {RootState} from \"../store\";\r\nimport {Action} from \"redux\";\r\nimport {actions} from \"./actions\";\r\nimport {popupAct} from \"../../Types/types\";\r\n\r\nexport const popupActions = {\r\n    showPopup: (message:string, popupAct:popupAct) => ({type:\"SHOW_POPUP\",message,popupAct} as const),\r\n    confirmPopup: (confirm:boolean) => ({type:\"CONFIRM_POPUP\",confirm} as const)\r\n};\r\n\r\nexport const onConfirmPopup = (popupAction:popupAct): ThunkAction<void, RootState, unknown, Action<string>> =>(dispatch)=>{\r\n    switch(popupAction.type){\r\n        case \"DELETE\":{\r\n            dispatch(actions.deleteToDO(popupAction.payload));\r\n            dispatch(popupActions.confirmPopup(true));\r\n            break;\r\n        }\r\n        default: return\r\n    }\r\n}","import {todoState} from \"../Types/types\";\r\nimport {RootState} from \"../store/store\";\r\n\r\nexport const makeToDo = (state:todoState, title:string, userId:number) => {\r\n    const nextId = state.todos[state.todos.length-1].id +1;\r\n    return {userId, id:nextId, title, completed:false};\r\n};\r\nexport const findToDo = (state:todoState, payload:number, completed:boolean) => {\r\n    return state.todos.map((todo) => {\r\n        if (todo.id === payload) return {...todo, completed};\r\n        return todo\r\n    })\r\n};\r\n\r\n//SELECTORS\r\n\r\nexport const getUserId = (state:RootState):number => {\r\n    return state.user.userId\r\n};","import axios from \"axios\";\r\nimport {ToDo} from \"../Types/types\";\r\n\r\nconst api = {\r\n\r\n    loadData(userId:number){\r\n        return axios.get<ToDo[]>(`https://jsonplaceholder.typicode.com/todos?userId=${userId}`)\r\n            .then(response => response.data)\r\n    }\r\n};\r\n\r\n\r\n\r\nexport default api;","import api from \"../../api/api\";\r\nimport {ToDo} from \"../../Types/types\";\r\nimport {Action, Dispatch} from \"redux\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport {RootState} from \"../store\";\r\n\r\nexport const todoActions = {\r\n    loadTodosStatus : (payload: boolean) => {\r\n        return {type: \"LOAD_TODO_LIST\", payload} as const\r\n    },\r\n\r\n    loadToDoListSuccess : (payload: ToDo[]) => {\r\n        return {type: \"LOAD_TODO_SUCCESS\", payload} as const\r\n    },\r\n\r\n    deleteToDO : (id: number) => {\r\n        return {type: \"DELETE_TODO\", id} as const\r\n    },\r\n\r\n    completeToDo : (id: number) => {\r\n        return {type: \"COMPLETE_TODO\", id} as const\r\n    },\r\n\r\n    uncompleteToDo : (id: number) => {\r\n        return {type: \"UNCOMPLETE_TODO\", id} as const\r\n    },\r\n    addToDo : (title: string, userId:number) => {\r\n        return {type: \"ADD_TODO\", title, userId} as const\r\n    }\r\n};\r\n\r\n\r\n\r\nexport const fetchToDoList = (userId:number): ThunkAction<void, RootState, unknown, Action<string>> => (dispatch:Dispatch) => {\r\n    dispatch(todoActions.loadTodosStatus(true));\r\n    api.loadData(userId)\r\n        .then ((data) => {dispatch(todoActions.loadToDoListSuccess(data));})\r\n        .then (()=>dispatch(todoActions.loadTodosStatus(false)))\r\n};\r\n\r\n\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1VCKf\",\"header__img\":\"Header_header__img__2Sa2s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Loader_container__3LFDG\",\"lds_ripple\":\"Loader_lds_ripple__1-tX1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"hide\":\"Popup_hide__3fQiw\",\"show\":\"Popup_show__1Iesk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__3xaJM\",\"primary\":\"Button_primary__1mTxz\",\"secondary\":\"Button_secondary__2t2Od\",\"danger\":\"Button_danger__311uS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Authorization_container__3j9oq\",\"select\":\"Authorization_select__3iwlh\"};","module.exports = __webpack_public_path__ + \"static/media/redux.85772647.svg\";","import {todoActions} from \"./todo\";\r\nimport {userActions} from \"./user\";\r\nimport {popupActions} from \"./popup\";\r\n\r\nexport const actions = {...todoActions,...userActions, ...popupActions};\r\n\r\ntype inferValueTypes<T> = T extends {[key:string]:infer U} ? U : never;\r\nexport type actionsTypes = ReturnType<inferValueTypes<typeof actions>>;","\r\nexport const userActions = {\r\n    userLogin : (id:number) => {\r\n        return {\r\n            type: \"LOGIN\",\r\n            payload: id\r\n        } as const\r\n    }\r\n};","import React from \"react\";\r\nimport style from \"./Header.module.css\";\r\nimport logo from \"../../img/redux.svg\";\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className={style.header}>\r\n            <img className={style.header__img} src={logo} alt='Redux'/>\r\n            TO-DO REDUX APP\r\n        </header>\r\n    )\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport style from './Loader.module.css';\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <div className={style.container}>\r\n            <div className={style.lds_ripple}>\r\n                <div></div>\r\n                <div></div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Loader;","import React, {useEffect, Suspense} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport { fetchToDoList } from \"../../store/actions/todo\";\r\nimport {actions} from \"../../store/actions/actions\";\r\nimport Loader from \"../Loader/Loader\";\r\nimport {ToDo, popupAct} from \"../../Types/types\";\r\nimport {RootState} from \"../../store/store\";\r\nimport  {Action} from \"redux\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nconst ToDoList = React.lazy(()=> import(\"./ToDoList\"));\r\n\r\n\r\ntype stateProps = {\r\n    todos: ToDo[]\r\n    userId: number\r\n    isLoading: boolean\r\n}\r\ntype dispatchProps = {\r\n    load: (userId:number) => void\r\n    deleteToDo: (toDoId:number) => void\r\n    completeToDo: (toDoId:number) => void\r\n    uncompleteToDo: (toDoId:number) => void\r\n    showPopup: (message:string,popupAct:popupAct) => void\r\n}\r\n\r\ntype Props = stateProps & dispatchProps;\r\n\r\n\r\nconst ToDoListContainer:React.FC<Props> = (props) => {\r\n    const {load, userId, isLoading, todos, deleteToDo, completeToDo, uncompleteToDo, showPopup} = props;\r\n\r\n    useEffect(() => {\r\n        load(userId);\r\n    },[load, userId]);\r\n\r\n    return isLoading ?  <Loader/> :\r\n                        <Suspense fallback={<Loader/>}>\r\n                            <ToDoList\r\n                            todos={todos}\r\n                            deleteToDo={deleteToDo}\r\n                            completeToDo={completeToDo}\r\n                            uncompleteToDo={uncompleteToDo}\r\n                            showPopup={showPopup}/>\r\n                        </Suspense>\r\n\r\n};\r\n\r\n\r\n\r\nconst mapStateToProps = (state:RootState):stateProps => {\r\n    return {\r\n        todos: state.todos.todos,\r\n        userId: state.user.userId,\r\n        isLoading: state.todos.isLoading\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch:ThunkDispatch<RootState,unknown,Action>):dispatchProps => {\r\n    return {\r\n        load: (userId) => dispatch(fetchToDoList(userId)),\r\n        deleteToDo: (toDoId) => dispatch(actions.deleteToDO(toDoId)),\r\n        completeToDo: (toDoId) => dispatch(actions.completeToDo(toDoId)),\r\n        uncompleteToDo: (toDoId) => dispatch(actions.uncompleteToDo(toDoId)),\r\n        showPopup: (message,popupAct) => dispatch(actions.showPopup(message,popupAct))\r\n    }\r\n};\r\n\r\n\r\nexport default connect<stateProps,dispatchProps,{},RootState>(mapStateToProps, mapDispatchToProps)(ToDoListContainer);","import React from \"react\";\r\nimport style from \"./Popup.module.css\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootState} from \"../../store/store\";\r\nimport {Action} from \"redux\";\r\nimport {popupAct} from \"../../Types/types\";\r\nimport {onConfirmPopup} from \"../../store/actions/popup\";\r\nimport {ThunkDispatch} from \"redux-thunk\";\r\nimport Button from \"../Button/Button\";\r\nimport {actions} from \"../../store/actions/actions\";\r\n\r\ntype StateProps = {\r\n    message:string\r\n    confirm:boolean\r\n    isShown:boolean\r\n    popupAct:popupAct\r\n}\r\ntype DispatchProps = {\r\n    onConfirm:(popupAct:popupAct)=>void\r\n    onCancel:(confirm:boolean)=>void\r\n}\r\ntype Props = StateProps & DispatchProps\r\n\r\nconst mapStateToProps = (state:RootState):StateProps => {\r\n    return {\r\n        message:state.popup.message,\r\n        confirm:state.popup.confirm,\r\n        isShown:state.popup.isShown,\r\n        popupAct:state.popup.popupAct\r\n    }\r\n};\r\nconst mapDispatchToProps = (dispatch:ThunkDispatch<RootState,unknown,Action>):DispatchProps => {\r\n    return {\r\n        onConfirm:(popupAct)=>dispatch(onConfirmPopup(popupAct)),\r\n        onCancel:(confirm)=>dispatch(actions.confirmPopup(confirm))\r\n    }\r\n};\r\n\r\nconst Popup:React.FC<Props> = ({isShown, message, popupAct,onConfirm, onCancel}) => {\r\n   const containerVisibility = isShown ? style.show : style.hide;\r\n    return (\r\n        <div className={containerVisibility}>\r\n            {message}\r\n            <Button theme={'primary'} callback={()=>onConfirm(popupAct)}>OK</Button>\r\n            <Button theme={'danger'} callback={()=>onCancel(false)}>CANCEL</Button>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Popup);","import React from 'react';\r\nimport './App.css';\r\nimport Header from \"../Header/Header\";\r\nimport ToDos from \"../ToDoList/ToDoListContainer\";\r\nimport Popup from \"../Popup/Popup\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootState} from \"../../store/store\";\r\nimport {Redirect} from \"react-router\";\r\n\r\ntype StateProps = {\r\n    userId:number\r\n}\r\ntype Props = StateProps\r\n\r\nconst App:React.FC<Props> = ({userId}) =>{\r\n    if(userId===0) return <Redirect to=\"/\"/>;\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Header/>\r\n            <ToDos/>\r\n            <Popup/>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state:RootState):StateProps => {\r\n    return ({userId:state.user.userId})\r\n};\r\nexport default connect(mapStateToProps,null)(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {findToDo, makeToDo} from \"../../utils/utils\";\r\nimport {actionsTypes} from \"../actions/actions\";\r\nimport {ToDo, todoState} from \"../../Types/types\";\r\n\r\nconst initialState:todoState = {\r\n    todos: [],\r\n    isLoading: false\r\n};\r\n\r\nconst todoReducer = (state=initialState, action:actionsTypes):todoState => {\r\n    switch (action.type) {\r\n        case \"LOAD_TODO_LIST\": {\r\n            return {...state, isLoading:action.payload};\r\n        }\r\n        case \"LOAD_TODO_SUCCESS\": {\r\n            return {...state, todos: action.payload}\r\n        }\r\n\r\n        case \"DELETE_TODO\": {\r\n            const newList = state.todos.filter((el:ToDo) => el.id !== action.id);\r\n            return { ...state, todos: newList}\r\n        }\r\n        case \"COMPLETE_TODO\": {\r\n            return {...state, todos:findToDo(state,action.id,true)}\r\n        }\r\n        case \"UNCOMPLETE_TODO\": {\r\n            return {...state, todos:findToDo(state,action.id,false)}\r\n        }\r\n        case \"ADD_TODO\": {\r\n            const newToDo = makeToDo(state,action.title,action.userId);\r\n            return {...state, todos:[...state.todos,newToDo]}\r\n        }\r\n\r\n        default: return state;\r\n    }\r\n};\r\n\r\nexport default todoReducer;","import {actionsTypes} from \"../actions/actions\";\r\nimport {userState} from \"../../Types/types\";\r\n\r\nconst initialState:userState = {\r\n    userId: 0\r\n};\r\n\r\nconst userReducer = (state= initialState, action:actionsTypes):userState => {\r\n    switch (action.type) {\r\n        case \"LOGIN\": {\r\n            return {...state, userId: action.payload}\r\n        }\r\n        default: return state;\r\n    }\r\n};\r\n\r\nexport default userReducer;","import {popupState} from \"../../Types/types\";\r\nimport {actionsTypes} from \"../actions/actions\";\r\n\r\nconst initialState:popupState = {\r\n    message:'',\r\n    confirm:false,\r\n    isShown:false,\r\n    popupAct:{type:'',payload:0}\r\n};\r\n\r\nexport const popupReducer = (state=initialState, action:actionsTypes):popupState => {\r\n    switch (action.type) {\r\n        case \"SHOW_POPUP\":{\r\n            return {...state, message:action.message, isShown:true, popupAct:{...state.popupAct,...action.popupAct}}\r\n        }\r\n        case \"CONFIRM_POPUP\":{\r\n            return {...state, confirm:action.confirm, isShown:false}\r\n        }\r\n        default: return state\r\n    }\r\n};","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport todoReducer from \"./reducers/todoReducer\";\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\nimport thunk from \"redux-thunk\";\r\nimport userReducer from \"./reducers/userReducer\";\r\nimport {popupReducer} from \"./reducers/popupReducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    todos:todoReducer,\r\n    user:userReducer,\r\n    popup:popupReducer\r\n});\r\n\r\n\r\nexport const store = createStore(rootReducer, composeWithDevTools(\r\n    applyMiddleware(thunk)\r\n));\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\n","import React, {FormEvent, useState} from \"react\";\r\nimport {Dispatch} from \"redux\";\r\nimport {actions} from \"../../store/actions/actions\";\r\nimport {connect} from \"react-redux\";\r\nimport Button from \"../Button/Button\";\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport {withRouter} from \"react-router\";\r\nimport style from \"./Authorization.module.css\";\r\n\r\ntype DispatchProps = {\r\n    userLogin: (id:number)=>void\r\n}\r\ntype Props = DispatchProps & RouteComponentProps\r\n\r\n\r\nconst mapDispatchToProps = (dispatch:Dispatch):DispatchProps => {\r\n    return {\r\n        userLogin: (id) => dispatch(actions.userLogin(id))\r\n    }\r\n};\r\n\r\n\r\n\r\nconst Authorization:React.FC<Props> = ({userLogin, history})=> {\r\n    const [value, setValue] = useState('1');\r\n    const handleChange = (e:FormEvent<HTMLSelectElement>) => {\r\n        setValue(e.currentTarget.value);\r\n    };\r\n    const onClick = () => {\r\n       userLogin(+value);\r\n        history.push('/App')\r\n    };\r\n\r\n\r\n  return (\r\n      <div className={style.container}>\r\n          <label>\r\n              Выберите пользователя:\r\n              <select className={style.select} value={value} onChange={handleChange}>\r\n                  <option value=\"1\">Alex</option>\r\n                  <option value=\"2\">Svetlana</option>\r\n                  <option value=\"3\">Evgeniy</option>\r\n                  <option value=\"4\">Elena</option>\r\n              </select>\r\n          </label>\r\n          <Button theme={'primary'} callback={onClick}>Show To-Do List</Button>\r\n      </div>\r\n  )  \r\n};\r\n\r\nexport default withRouter(connect(null,mapDispatchToProps)(Authorization));","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { store } from \"./store/store\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Authorization from \"./components/Authorization/Authorization\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router>\n        <Switch>\n          <Route path=\"/\" component={Authorization} exact />\n          <Route path=\"/App\" component={App} />\n        </Switch>\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}